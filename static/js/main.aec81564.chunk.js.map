{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["numCols","operations","App","useState","rows","i","push","Array","from","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","Fragment","className","onClick","generateEmptyGrid","Math","random","style","display","gridTemplateColumns","map","col","k","newGrid","width","height","backgroundColor","undefined","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aec81564.chunk.js","sourcesContent":["import React, { useCallback, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport produce from \"immer\";\n\nconst numRows = 30;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n  return rows;\n};\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n    return rows;\n  });\n\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += g[newI][newJ];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0;\n            } else if (g[i][j] === 0 && neighbors === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 500);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"button-container\">\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runSimulation();\n            }\n          }}\n        >\n          {running ? \"stop\" : \"start\"}\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            setGrid(generateEmptyGrid());\n          }}\n        >\n          Clear\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            const rows = [];\n            for (let i = 0; i < numRows; i++) {\n              rows.push(\n                Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n              );\n            }\n            setGrid(rows);\n          }}\n        >\n          Random\n        </button>\n      </div>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 25px)`,\n        }}\n        className=\"App\"\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? \"pink\" : undefined,\n                border: \"solid 2px #3F3F3F\",\n              }}\n            ></div>\n          ))\n        )}\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}